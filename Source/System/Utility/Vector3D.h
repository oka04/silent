//*****************************************************************************
//
// ３Ｄベクトルサポートクラス
//
// Vector3D.h
//
// K_Yamaoka
//
// 2013/05/28
//
// 2014/10/24　関数説明の追加
//
// 2017/12/14　ベクトルの長さを求める関数を追加
//
// 2020/11/12　GetMatrixFromTwoVector関数を追加
//
//*****************************************************************************

#pragma once

#include <d3dx9.h>

//=============================================================================
// ３Ｄベクトルと行列の乗算
// 戻り値：計算後の３Ｄベクトル
// 引　数：const D3DXVECTOR3*　３Ｄベクトルのアドレス
// 　　　　const D3DXMATRIX* 　行列のアドレス
//=============================================================================
D3DXVECTOR3 D3DXVec3TransformCoord(const D3DXVECTOR3* pV, const D3DXMATRIX* pM);

//=============================================================================
// ３Ｄベクトルの正規化
// 戻り値：正規化された３Ｄベクトル
// 引　数：const D3DXVECTOR3*　正規化したい３Ｄベクトルのアドレス
//=============================================================================
D3DXVECTOR3 D3DXVec3Normalize(const D3DXVECTOR3* pV);

//=============================================================================
// ３Ｄベクトルの外積計算
// 戻り値：外積計算結果
// 引　数：const D3DXVECTOR3*　左辺値としての３Ｄベクトルのアドレス
// 　　　　const D3DXVECTOR3*　右辺値としての３Ｄベクトルのアドレス
//=============================================================================
D3DXVECTOR3 D3DXVec3Cross(const D3DXVECTOR3* pV1, const D3DXVECTOR3* pV2);

//=============================================================================
// 法線を求める
// 戻り値：正規化された法線ベクトル
// 引　数：const D3DXVECTOR3*　１つ目の３Ｄベクトルのアドレス
// 　　　　const D3DXVECTOR3*　２つ目の３Ｄベクトルのアドレス
// 　　　　const D3DXVECTOR3*　３つ目の３Ｄベクトルのアドレス
//=============================================================================
D3DXVECTOR3 D3DXComputeNormal(const D3DXVECTOR3* pV1, const D3DXVECTOR3* pV2, const D3DXVECTOR3* pV3);

//=============================================================================
// 法線を求める
// 戻り値：正規化された法線ベクトル
// 引　数：const D3DXVECTOR3 [3]　ベクトル配列の先頭番地
//=============================================================================
D3DXVECTOR3 D3DXComputeNormal(const D3DXVECTOR3 vertex[3]);

//=============================================================================
// ３Ｄベクトルの長さを求める
// 戻り値：長さ
// 引　数：const D3DXVECTOR3*　３Ｄベクトルのアドレス
// 　　　　const D3DXVECTOR3*　３Ｄベクトルのアドレス
//=============================================================================
FLOAT D3DXVec3Length(const D3DXVECTOR3* pV1, const D3DXVECTOR3* pV2);

//=============================================================================
// ベクトル１をベクトル２に向かせる回転行列を求める
// 戻り値：回転行列
// 引　数：const D3DXVECTOR3　ベクトル１
// 　　　　const D3DXVECTOR3　ベクトル２
//=============================================================================
D3DXMATRIX GetMatrixFromTwoVector(const D3DXVECTOR3 v1, const D3DXVECTOR3 v2);