//*****************************************************************************
//
// ２Ｄベクトルサポートクラス
//
// Vector2D.h
//
// K_Yamaoka
//
// 2013/05/28
//
// 2013/11/13　D3DXVec2Rotate関数を追加
//
// 2014/10/24　関数説明の追加
//
// 2017/12/14　ベクトルの長さを求める関数を追加
//
//*****************************************************************************

#pragma once

#include <d3dx9.h>

//=============================================================================
// ２Ｄベクトルの正規化
// 戻り値：正規化された２Ｄベクトル
// 引　数：const D3DXVECTOR2*　正規化したい２Ｄベクトルのアドレス
//=============================================================================
D3DXVECTOR2 D3DXVec2Normalize(const D3DXVECTOR2* pV);

//=============================================================================
// ２Ｄベクトルの外積計算
// 戻り値：外積計算結果
// 引　数：const D3DXVECTOR2*　左辺値としての２Ｄベクトルのアドレス
// 　　　　const D3DXVECTOR2*　右辺値としての２Ｄベクトルのアドレス
//=============================================================================
FLOAT D3DXVec2Cross(const D3DXVECTOR2* pV1, const D3DXVECTOR2* pV2);

//=============================================================================
// ２Ｄベクトルの回転
// 戻り値：回転後の２Ｄベクトル
// 引　数：const D3DXVECTOR2*　回転前２Ｄベクトルのアドレス
// 　　　　const double        回転角度
//=============================================================================
D3DXVECTOR2 D3DXVec2Rotate(const D3DXVECTOR2* pV, const double angle);

//=============================================================================
// ２Ｄベクトルの回転
// 戻り値：回転後の２Ｄベクトル
// 引　数：const D3DXVECTOR2*　半径を表す２Ｄベクトルのアドレス
// 　　　　const D3DXVECTOR2*　中心座標を表す２Ｄベクトルのアドレス
// 　　　　const double        回転角度
//=============================================================================
D3DXVECTOR2 D3DXVec2Rotate(const D3DXVECTOR2* pRadius, const D3DXVECTOR2* pCenter, const float angle);

//=============================================================================
// ２Ｄベクトルの長さ
// 戻り値：長さ
// 引　数：const D3DXVECTOR2*　２Ｄベクトルのアドレス
// 　　　　const D3DXVECTOR2*　２Ｄベクトルのアドレス
//=============================================================================
FLOAT D3DXVec2Length(const D3DXVECTOR2* pV1, const D3DXVECTOR2* pV2);
