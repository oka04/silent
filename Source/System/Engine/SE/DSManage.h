//*****************************************************************************
//
// ＳＥ管理（DirectSound）
//
// DSManage.h
//
// K_Yamaoka
//
// 2021/10/06
//
//*****************************************************************************

#pragma once

#include <d3dx9.h>

#include <windows.h>

#include <map>
#include <string>

#include "DS.h"

#include "..\\Exception\\DxSystemException.h"

class DSManage
{
public:

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	DSManage();

	//=============================================================================
	// デストラクタ
	//=============================================================================
	~DSManage();

	//=============================================================================
	// サウンド管理クラスの初期化
	// 引　数：HWND アプリケーションのウィンドウハンドル
	//=============================================================================
	void Initialize(const HWND hAppWnd);

	//=============================================================================
	// ＳＥの追加
	// 引　数：ＳＥファイル名
	//=============================================================================
	void AddSE(std::string strFileName);

	//=============================================================================
	// ＳＥの再生
	// 引　数：string ＳＥファイル名
	// 　　　：DOWRD 優先度(0～0xffffffff)
	//=============================================================================
	void PlaySE(std::string strFileName, DWORD priority);

	//=============================================================================
	// ＳＥの停止
	// 引　数：string ＳＥファイル名
	//=============================================================================
	void StopSE(std::string strFileName);

	//=============================================================================
	// ＳＥの削除（省メモリ対策）
	// 引　数：string ＳＥファイル名
	//=============================================================================
	void ReleaseSE(std::string strFileName);

	//=============================================================================
	// すべてのＳＥの停止
	// 戻り値：成功 true、失敗 false
	//=============================================================================
	void StopAllSE();

	//=============================================================================
	// ＳＥの周波数をリセット
	//=============================================================================
	void SetStandardFrequency(std::string strFileName);

	//=============================================================================
	// ＳＥの周波数を調整
	// 引　数：int 増減させる周波数
	//=============================================================================
	void SetFrequency(std::string strFileName, int value);

	//=============================================================================
	// ＳＥのパンをリセット
	//=============================================================================
	void SetStandardPan(std::string strFileName);

	//=============================================================================
	// ＳＥのパンを調整
	// 引　数：int 増減させる数値
	//=============================================================================
	void SetPan(std::string strFileName, int value);

	//=============================================================================
	// ＳＥのボリュームをリセット
	//=============================================================================
	void SetStandardVolume(std::string strFileName);

	//=============================================================================
	// ＳＥのボリュームを調整
	// 引　数：int 増減させる数値
	//=============================================================================
	void SetVolume(std::string strFileName, int value);

private:

	LPDIRECTSOUND8 m_pSound;

	LPDIRECTSOUNDBUFFER m_pPrimary;

	//ＳＥ管理用コンテナ
	std::map< std::string, DS* > m_mapSE;

	//-----------------------------------------------------------------------------
	// Waveファイルを開く
	// 引　数：CHAR*         ファイル名
	// 　　　：HMMIO*        ハンドルへのポインタ
	// 　　　：WAVEFORMATEX* フォーマットへのポインタのアドレス
	// 　　　：MMCKINFO*     RIFFチャンク情報へのポインタ
	// 戻り値：HRESULT
	//-----------------------------------------------------------------------------
	HRESULT WaveFileOpen(CHAR* strFileName, HMMIO* phmmioIn, WAVEFORMATEX** ppwfxInfo, MMCKINFO* pckInRIFF);

	//-----------------------------------------------------------------------------
	// フォーマットチャンクデータの読み込み
	// 引　数：HMMIO*        ハンドルへのポインタ
	// 　　　：MMCKINFO*     RIFFチャンク情報へのポインタ
	// 　　　：WAVEFORMATEX* フォーマットへのポインタのアドレス
	// 戻り値：HRESULT
	//-----------------------------------------------------------------------------
	HRESULT ReadFormat(HMMIO hmmioIn, MMCKINFO* pckInRIFF, WAVEFORMATEX** ppwfxInfo);

	//-----------------------------------------------------------------------------
	// データチャンクへ進入
	// 引　数：HMMIO*    ハンドルへのポインタ
	// 　　　：MMCKINFO* データチャンク情報へのポインタ
	// 　　　：MMCKINFO* RIFFチャンク情報へのポインタ
	// 戻り値：HRESULT
	//-----------------------------------------------------------------------------
	HRESULT DescendDataChunk(HMMIO* phmmioIn, MMCKINFO* pckIn, MMCKINFO* pckInRIFF);

	//-----------------------------------------------------------------------------
	// データをバッファにコピーする
	// 引　数：HMMIO*    ハンドルへのポインタ
	// 　　　：UINT      データのバイト数
	// 　　　：BYTE*     バッファの先頭アドレス
	// 　　　：MMCKINFO* データチャンク情報へのポインタ
	// 戻り値：HRESULT
	//-----------------------------------------------------------------------------
	HRESULT CopyWaveData(HMMIO hmmioIn, UINT cbRead, BYTE* pbDest, MMCKINFO* pckIn);

	//-----------------------------------------------------------------------------
	// すべてのＳＥの削除
	// 戻り値：成功 true、失敗 false
	//-----------------------------------------------------------------------------
	bool DeleteAllSE();

	//コピー防止
	DSManage& operator=(const DSManage&);
	DSManage(const DSManage&);
};