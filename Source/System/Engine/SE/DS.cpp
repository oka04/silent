//*****************************************************************************
//
// ＳＥ（DirectSound）
//
// DS.cpp
//
// K_Yamaoka
//
// 2021/10/06
//
//*****************************************************************************

#define _USING_V110_SDK71_ 1

#include "DS.h"

#include <cassert>

//=============================================================================
// コンストラクタ
//=============================================================================
DS::DS() : m_pSoundBuffer(nullptr)
{

}

//=============================================================================
// デストラクタ
//=============================================================================
DS::~DS()
{
	if (m_pSoundBuffer) {
		m_pSoundBuffer->Release();
		m_pSoundBuffer = nullptr;
	}
}

//=============================================================================
// サウンドバッファを登録
// 引　数：LPDIRECTSOUNDBUFFER セカンダリバッファのポインタ
//=============================================================================
void DS::SetSoundBuffer(LPDIRECTSOUNDBUFFER pSoundBuffer)
{
	m_pSoundBuffer = pSoundBuffer;

	m_pSoundBuffer->GetFrequency((unsigned long*)&m_standardFrequency);

	m_frequency = m_standardFrequency;

	m_pan = 0;

	m_volume = 0;
}

//=============================================================================
// サウンドバッファを取得
// 戻り値：LPDIRECTSOUNDBUFFER セカンダリバッファのポインタ
//=============================================================================
LPDIRECTSOUNDBUFFER DS::GetSoundBuffer()
{
	return m_pSoundBuffer;
}

//=============================================================================
// 標準の周波数を設定
//=============================================================================
void DS::SetStandardFrequency()
{
	m_pSoundBuffer->SetFrequency(m_standardFrequency);
	m_frequency = m_standardFrequency;
}

//=============================================================================
// 周波数の増減値を設定
// 引　数：int 増減値
//=============================================================================
void DS::SetFrequency(int value)
{
	m_frequency += value;
	m_pSoundBuffer->SetFrequency(m_frequency);
}

//=============================================================================
// 標準のパンを設定
//=============================================================================
void DS::SetStandardPan()
{
	m_pSoundBuffer->SetPan(0);
}

//=============================================================================
// パンの増減値を設定
// 引　数：int 増減値
//=============================================================================
void DS::SetPan(int value)
{
	m_pan += value;
	m_pSoundBuffer->SetPan(m_pan);
}

//=============================================================================
// 標準のボリュームを設定
//=============================================================================
void DS::SetStandardVolume()
{
	m_pSoundBuffer->SetVolume(0);
}

//=============================================================================
// ボリュームの増減値を設定
// 引　数：int 増減値
//=============================================================================
void DS::SetVolume(int value)
{
	m_volume += value;
	m_pSoundBuffer->SetVolume(m_volume);
}


