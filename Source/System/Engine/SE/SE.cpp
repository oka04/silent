//*****************************************************************************
//
// ＳＥ
//
// SE.cpp
//
// K_Yamaoka
//
// 2011/11/15
//
//*****************************************************************************

#define _USING_V110_SDK71_ 1

#include "SE.h"

#include <cassert>

//パフォーマンスのアドレス格納用ポインタ初期化
LPDIRECTMUSICPERFORMANCE8 SE::m_pPerformance = nullptr;

//=============================================================================
// コンストラクタ
//=============================================================================
SE::SE()
	: m_pSegment(nullptr)
{

}

//=============================================================================
// デストラクタ
//=============================================================================
SE::~SE()
{
	//登録されているセグメントの解放

	if (m_pSegment) {
		m_pSegment->Unload(m_pPerformance);
		m_pSegment->Release();
		m_pSegment = nullptr;
	}
}

//=============================================================================
// パフォーマンスのアドレスを登録
// 引　数：LPDIRECTMUSICPERFORMANCE8 パフォーマンスのアドレス
//=============================================================================
void SE::SetPerformancePointer(const LPDIRECTMUSICPERFORMANCE8 pPerformance)
{
	assert(pPerformance);

	if (!m_pPerformance) {
		m_pPerformance = pPerformance;
	}
}

//=============================================================================
// セグメントのアドレスを登録
// 引　数：LPDIRECTMUSICSEGMENT8 セグメントのアドレス
//=============================================================================
void SE::SetSegmentPointer(const LPDIRECTMUSICSEGMENT8 pSegment)
{
	assert(pSegment);

	m_pSegment = pSegment;
}

//=============================================================================
// セグメントが登録されているポインタのアドレスを取得
// 戻り値：LPDIRECTMUSICSEGMENT8* セグメントが登録されているポインタのアドレス
//=============================================================================
LPDIRECTMUSICSEGMENT8* SE::GetSegmentPointerAddress()
{
	return &m_pSegment;
}


