//*****************************************************************************
//
// バウンディングスフィアクラス
//
// BoundingSphere.h
//
// K_Yamaoka
//
// 2013/03/04
//
// 2014/10/17 GetWorldTransformMatrix→GetWorldTransform　名称変更
//            SetWorldTransformMatrix→SetWorldTransform　名称変更
//
// 2020/09/03 シェーダー対応に変更
//
//*****************************************************************************

#pragma once

#include <d3dx9.h>

#include "..\\Engine.h"
#include "..\\Matrix\\Camera.h"
#include "..\\Matrix\\Projection.h"

class BoundingSphere
{
public:

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	BoundingSphere();

	//=============================================================================
	// デストラクタ
	//=============================================================================
	~BoundingSphere();

	//=============================================================================
	// バウンディングスフィアの作成
	// 引　数：Engine*     ３Ｄエンジンクラスへのポインタ
	// 　　　　const float 半径
	// 　　　　const bool  描画フラグ（デバッグ用）デフォルトはfalse
	//=============================================================================
	void CreateBS(Engine* pEngine, const float radius, const bool showFlag = false);

	//=============================================================================
	// バウンディングスフィアの描画
	// 引　数：Engine* ３Ｄエンジンクラスへのポインタ
	// 　　　　Camera*           カメラクラスのポインタ
	// 　　　　Projection*       プロジェクションクラスのポインタ
	// 　　　　D3DCOLORVALUE*    色　デフォルトは白
	//=============================================================================
	void Draw(Engine* pEngine, Camera* pCamera, Projection* pProj, D3DCOLORVALUE* color = nullptr);

	//=============================================================================
	// ワールド座標変換行列の設定
	// 引　数：const LPD3DXMATRIX ワールド座標変換行列へのポインタ
	//=============================================================================
	void SetWorldTransform(const LPD3DXMATRIX pMatWorld);

	//=============================================================================
	// ワールド座標変換行列の取得
	// 戻り値：const D3DXMATRIX& ワールド座標変換行列
	//=============================================================================
	D3DXMATRIX GetWorldTransform() const;

	//=============================================================================
	// 半径の設定
	// 引　数：float 半径
	// 備　考：この関数を呼び出してもメッシュの大きさは変わらない
	// 　　　　メッシュの大きさも変更したい場合は、再度CreateBSを呼び出す必要がある
	//=============================================================================
	void SetRadius(const float radius);

	//=============================================================================
	// 半径の取得
	// 戻り値：float 半径
	//=============================================================================
	float GetRadius() const;

private:

	//１つの輪の頂点数
	static const int CIRCLE_VERTEX_NUM;

	//全頂点数
	static const int FULL_VERTEX_NUM;

	//インデックス数
	static const int INDEX_NUM;

	//頂点バッファへのポインタ
	LPDIRECT3DVERTEXBUFFER9 m_pVB;

	//インデックスバッファへのポインタ
	LPDIRECT3DINDEXBUFFER9  m_pIB;

	//ワールド座標変換行列
	D3DXMATRIX m_matWorld;

	//半径
	float m_radius;

	//エフェクト（シェーダー）
	ID3DXEffect* m_pEffect;

	//頂点宣言
	LPDIRECT3DVERTEXDECLARATION9 m_pVertexDeclaration;

	//-----------------------------------------------------------------------------
	// 頂点バッファ、インデックスバッファの削除
	//-----------------------------------------------------------------------------
	void Delete();

	//コピー防止
	BoundingSphere(const BoundingSphere&);
	BoundingSphere& operator=(const BoundingSphere&);
};