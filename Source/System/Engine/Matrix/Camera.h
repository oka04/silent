//*****************************************************************************
//
// カメラクラス
//
// Camera.h
//
// K_Yamaoka
//
// 2013/03/04
//
//*****************************************************************************

#pragma once

#include <d3dx9.h>

#include "..\\Engine.h"

class Camera
{
public:

	//カメラ情報は頻繁に変更する可能性があるためパブリックに置く

	//視点
	D3DXVECTOR3 m_vecEye;

	//注目点
	D3DXVECTOR3 m_vecAt;

	//上方向
	D3DXVECTOR3 m_vecUp;

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	Camera();

	//=============================================================================
	// コンストラクタ
	// 引　数：const D3DXVECTOR3* 視点へのポインタ
	// 　　　　const D3DXVECTOR3* 注目点へのポインタ
	// 　　　　const D3DXVECTOR3* 上方向へのポインタ（おおよその方向を示していれば再計算される）
	//=============================================================================
	Camera(const D3DXVECTOR3* pVecEye, const D3DXVECTOR3* pVecAt, const D3DXVECTOR3* pVecUp);

	//=============================================================================
	// 上方向の再計算
	//=============================================================================
	void RecalculateUpDirection();

	//=============================================================================
	// ビュー変換行列の取得
	// 戻り値：D3DXMATRIX ビュー変換行列
	//=============================================================================
	D3DXMATRIX GetViewMatrix() const;

	//=============================================================================
	// ビルボード用行列の取得
	// 戻り値：D3DXMATRIX ビュー変換行列から平行移動成分を抜いた逆行列
	//=============================================================================
	D3DXMATRIX GetBillboardMatrix() const;

	//=============================================================================
	// ビルボード用行列の取得
	// 戻り値：D3DXMATRIX ビュー変換行列から平行移動、ＸＺ回転成分を抜いた逆行列
	//=============================================================================
	D3DXMATRIX GetYBillboardMatrix() const;

	//=============================================================================
	// カメラ回転：注目点中心にＸ軸回転
	// 引　数：const float 回転角度（ラジアン角）
	//=============================================================================
	void RotateXAroundAt(const float angle);

	//=============================================================================
	// カメラ回転：注目点中心にＹ軸回転
	// 引　数：const float 回転角度（ラジアン角）
	//=============================================================================
	void RotateYAroundAt(const float angle);

	//=============================================================================
	// カメラ回転：注目点中心にＺ軸回転
	// 引　数：const float 回転角度（ラジアン角）
	//=============================================================================
	void RotateZAroundAt(const float angle);

	//=============================================================================
	// カメラ回転：視点中心にＸ軸回転
	// 引　数：const float 回転角度（ラジアン角）
	//=============================================================================
	void RotateXAroundEye(const float angle);

	//=============================================================================
	// カメラ回転：視点中心にＹ軸回転
	// 引　数：const float 回転角度（ラジアン角）
	//=============================================================================
	void RotateYAroundEye(const float angle);

	//=============================================================================
	// カメラ回転：視点中心にＺ軸回転
	// 引　数：const float 回転角度（ラジアン角）
	//=============================================================================
	void RotateZAroundEye(const float angle);

	//=============================================================================
	// 一人称視点
	// 引　数：const D3DXVECTOR3* 視点へのポインタ
	// 　　　　const D3DXVECTOR3* 方向ベクトルへのポインタ（単位ベクトル）
	//=============================================================================
	void SetFirstPerson(const D3DXVECTOR3* pVecEye, const D3DXVECTOR3* pVecDirection);

	//=============================================================================
	// 三人称視点（カメラは固定）
	// 引　数：const D3DXVECTOR3* 注目点へのポインタ
	// 　　　　const D3DXVECTOR3* 注目点からの相対位置へのポインタ
	//=============================================================================
	void SetThirdPerson(const D3DXVECTOR3* pVecAt, const D3DXVECTOR3* pVecRelative);

	//=============================================================================
	// 三人称視点（カメラは対象の回転に合わせて回転）
	// 引　数：const D3DXVECTOR3* 注目点へのポインタ
	// 　　　　const D3DXVECTOR3* 注目点からの相対位置へのポインタ
	// 　　　　const float        （対象物の）回転角度
	//=============================================================================
	void SetThirdPersonFromBehind(const D3DXVECTOR3* pVecAt, const D3DXVECTOR3* pVecRelative, const float angleY);

	//=============================================================================
	// デバイスへセット
	// 引　数：Engine* ３Ｄエンジンクラスへのポインタ
	//=============================================================================
	void SetDevice(Engine* pEngine);

	//=============================================================================
	// 変換行列の作成
	// 備　考：シャドウマップ用
	//=============================================================================
	void CreateMatrix();

private:

	//ビュー変換行列
	D3DXMATRIX m_matView;
};














