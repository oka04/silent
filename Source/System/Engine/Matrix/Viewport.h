//*****************************************************************************
//
// ビューポートクラス
//
// Viewport.h
//
// K_Yamaoka
//
// 2013/03/04
//
// 2019/11/28 GetViewportMatrix関数を追加
//
//*****************************************************************************

#pragma once

#include <d3dx9.h>

#include <vector>

#include "..\\Engine.h"

class Viewport
{
public:

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	Viewport();

	//=============================================================================
	// ビューポートの追加
	// 引　数：const D3DVIEWPORT9* ビューポート構造体へのポインタ
	//=============================================================================
	void Add(const D3DVIEWPORT9* pViewport);

	//=============================================================================
	// ビューポートの追加
	// 引　数：const DWORD 左上のＸ座標
	// 　　　　const DWORD 左上のＹ座標
	// 　　　　const DWORD 幅
	// 　　　　const DWORD 高さ
	// 　　　　const float ３Ｄ→２Ｄ変換時のＺの最小値
	// 　　　　const float ３Ｄ→２Ｄ変換時のＺの最大値
	//=============================================================================
	void Add(const DWORD x, const DWORD y, const DWORD width, const DWORD height, const float minZ, const float maxZ);

	//=============================================================================
	// ビューポートの削除
	// 引　数：const int インデックス
	//=============================================================================
	void Delete(const int index);

	//=============================================================================
	// 現在のビューポート数の取得
	// 戻り値：int ビューポートの数
	//=============================================================================
	int GetViewportCount() const;

	//=============================================================================
	// 指定したビューポート構造体の取得
	// 戻り値：D3DVIEWPORT9 ビューポート構造体
	// 引　数：const int インデックス
	//=============================================================================
	D3DVIEWPORT9 GetData(const int index) const;

	//=============================================================================
	// デバイスへセット
	// 引　数：Engine* ３Ｄエンジンクラスへのポインタ
	// 　　　　const int インデックス
	//=============================================================================
	void SetDevice(Engine* pEngine, const int index);

	//=============================================================================
	// ビューポート変換行列の取得
	// 戻り値：D3DXMATRIX ビューポート変換行列
	//=============================================================================
	D3DXMATRIX GetViewportMatrix(const int index) const;

private:

	//ビューポート構造体（可変長配列）
	std::vector<D3DVIEWPORT9> m_container;

	//コピー防止
	Viewport& operator=(const Viewport&);
	Viewport(const Viewport&);
};















