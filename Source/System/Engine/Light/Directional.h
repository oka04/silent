//*****************************************************************************
//
// ディレクショナルライトクラス
//
// Directional.h
//
// K_Yamaoka
//
// 2013/03/04
//
// 2013/06/18 メンバ変数にm_indexを追加
//            SetDevice関数の引数にindexを追加
//            On,Off用関数を追加
//            SetDirectionのオーバーロード関数を追加
//
// 2020/08/27 色の設定にアルファを加えた
//
//*****************************************************************************

#pragma once

#include <d3dx9.h>

#include "..\\Engine.h"

class DirectionalLight
{
public:

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	DirectionalLight();

	//=============================================================================
	// コンストラクタ
	// 引　数：const D3DLIGHT9* ライト構造体へのポインタ
	//=============================================================================
	DirectionalLight(const D3DLIGHT9* pLight);

	//=============================================================================
	// ライトの設定
	// 引　数：const D3DLIGHT9* ライト構造体へのポインタ
	//=============================================================================
	void SetLight(const D3DLIGHT9* pLight);

	//=============================================================================
	// ディフューズ色の設定
	// 引　数：const float アルファ（０～１．０）
	// 　　　　const float 赤（０～１．０）
	// 　　　　const float 緑（０～１．０）
	// 　　　　const float 青（０～１．０）
	//=============================================================================
	void SetDiffuse(const float a, const float r, const float g, const float b);

	//=============================================================================
	// アンビエント色の設定
	// 引　数：const float アルファ（０～１．０）
	// 　　　　const float 赤（０～１．０）
	// 　　　　const float 緑（０～１．０）
	// 　　　　const float 青（０～１．０）
	//=============================================================================
	void SetAmbient(const float a, const float r, const float g, const float b);

	//=============================================================================
	// 方向の設定
	// 引　数：const D3DXVECTOR3* 方向ベクトルへのポインタ（単位ベクトル）
	//=============================================================================
	void SetDirection(const D3DXVECTOR3* pVecDirection);

	//=============================================================================
	// 方向の設定
	// 引　数：const D3DXVECTOR3 方向ベクトル（単位ベクトル）
	//=============================================================================
	void SetDirection(const D3DXVECTOR3& vecDirection);

	//=============================================================================
	// ライト構造体の取得
	// 戻り値：D3DLIGHT9 ライト構造体
	//=============================================================================
	D3DLIGHT9 GetLight() const;

	//=============================================================================
	// デバイスへセット
	// 引　数：Engine*   ３Ｄエンジンクラスへのポインタ
	// 　　　　const int ライトインデックス
	//=============================================================================
	void SetDevice(Engine* pEngine, const int index);

	//=============================================================================
	// ライトを消す
	// 引　数：Engine*   ３Ｄエンジンクラスへのポインタ
	//=============================================================================
	void Off(Engine* pEngine);

	//=============================================================================
	// ライトを再点灯（Off後に使用）
	// 引　数：Engine*   ３Ｄエンジンクラスへのポインタ
	//=============================================================================
	void On(Engine* pEngine);

private:

	const int NOTSETDEVICE;

	//ライト構造体
	D3DLIGHT9 m_light;

	//ライトインデックス
	int m_index;
};







































