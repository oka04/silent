//*****************************************************************************
//
// パーティクル管理クラス
//
// ParticleManage.h
//
// K_Yamaoka
//
// 2020/09/10
//
// 2020/11/17 DeleteInfiniyParticle関数を追加
//
// 2020/11/19 ChangePosition,ChangeDirection関数を追加
//
//*****************************************************************************

#pragma once

#include <d3dx9.h>

#include <list>

#include "..\\Engine.h"

#include "ParticleBase.h"

#include "..\\..\\..\\Effect\\resource.h"

class ParticleManage
{
public:

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	ParticleManage();

	//=============================================================================
	// デストラクタ
	//=============================================================================
	~ParticleManage();

	//=============================================================================
	// 初期化
	// 引　数：Engine* エンジンクラスのアドレス
	// 備　考：シーンのStart関数で呼び出す
	//=============================================================================
	void Initialize(Engine* pEngine);

	//=============================================================================
	// 更新
	// 備　考：シーンのUpdate関数で呼び出す
	//=============================================================================
	void Update();

	//=============================================================================
	// 描画
	// 引　数：Engine*     エンジンクラスのアドレス
	// 　　　　Camera*     カメラクラスのアドレス
	// 　　　　Projection* プロジェクションクラスのアドレス
	// 備　考：シーンのDraw関数で呼び出す
	//=============================================================================
	void Draw(Engine* pEngine, Camera* pCamera, Projection* pProj);

	//=============================================================================
	// パーティクル生成
	// 引　数：Engine*           エンジンクラスのアドレス
	// 　　　　ParticleBase*     パーティクルクラスのアドレス
	// 　　　　const D3DXVECTOR3 位置
	// 　　　　const DWORD       存在時間
	//=============================================================================
	void Generate(Engine* pEngine, ParticleBase* pParticle, const D3DXVECTOR3 position, const DWORD existTime);

	//=============================================================================
	// 永遠に存在するパーティクルを消す
	// 引　数：const ParticleBase* パーティクルベースクラスのアドレス
	// 　　　　const DWORD         消すまでの時間（ミリ秒）
	//=============================================================================
	void DeleteInfiniyParticle(const ParticleBase* pTargetAddress, const DWORD deleteTime);

	//=============================================================================
	// 位置を変更する
	// 引　数：const ParticleBase* パーティクルベースクラスのアドレス
	// 　　　　const D3DXVECTOR3   新しい位置
	//=============================================================================
	void ChangePosition(ParticleBase* pTargetAddress, const D3DXVECTOR3 position);

	//=============================================================================
	// 方向を変更する
	// 引　数：const ParticleBase* パーティクルベースクラスのアドレス
	// 　　　　const D3DXVECTOR3   新しい方向
	//=============================================================================
	void ChangeDirection(ParticleBase* pTargetAddress, const D3DXVECTOR3 direction);

private:

	//パーティクルリスト
	std::list<ParticleBase*> m_lstParticleBase;

	//エフェクト（シェーダー）
	ID3DXEffect* m_pEffect;

	//頂点宣言
	LPDIRECT3DVERTEXDECLARATION9 m_pVertexDeclaration;

	//-----------------------------------------------------------------------------
	// 存在チェック
	// 備　考：存在時間を経過したパーティクルはリストから削除される
	//-----------------------------------------------------------------------------
	void ExistCheck();

	//コピー防止
	ParticleManage& operator=(const ParticleManage&);
	ParticleManage(const ParticleManage&);
};