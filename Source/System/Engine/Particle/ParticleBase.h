//*****************************************************************************
//
// パーティクルの基底クラス
//
// ParticleBase.h
//
// K_Yamaoka
//
// 2020/09/10
//
// 2020/11/12 パーティクル構造体に方向（オプション）を追加
//            Add関数に方向を追加（デフォルト付）
//
// 2020/11/13 パーティクル構造体にフェードアウト関連のデータを追加
//            Add関数にフェードアウトする時間を追加
//            メンバ変数にEngineクラスのポインタを追加
//
// 2020/11/17 ToFinite関数を追加
//
// 2020/11/19 ChangePosition､ChangeDirection関数を追加
//            メンバ変数にm_directionを追加
//
// 2020/12/08 構造体にm_angleとm_bHorizontalを追加
//            Add関数に角度と横置きフラグを追加
//
//*****************************************************************************

#pragma once

#include <d3dx9.h>

#include <list>

#include <cassert>

#include "..\\Engine.h"
#include "..\\Matrix\\Camera.h"
#include "..\\Matrix\Projection.h"
#include "..\\Light\\Ambient.h"
#include "..\\Light\\Directional.h"

#include "..\..\\Utility\\Matrix.h"

//-----------------------------------------------------------------------------
// パーティクル用頂点情報
//-----------------------------------------------------------------------------
typedef struct {
	D3DXVECTOR3 vertex;
	FLOAT       u, v;
} PARTICLE_VERTEX;

//-----------------------------------------------------------------------------
// パーティクル用構造体
//-----------------------------------------------------------------------------
struct Particle
{
	D3DXVECTOR3 m_position;  //位置
	D3DCOLORVALUE m_color;   //色
	DWORD m_generateTime;    //生成された時間
	DWORD m_fadeOutTime;     //フェードアウト時間
	float m_fadeValue;       //１フレームでフェードする値
	DWORD m_existTime;       //存在する時間
	bool m_bFadeOut;         //フェードアウトフラグ
	bool m_bExist;           //存在フラグ
	float m_angle;           //回転角度
	bool m_bHorizontal;      //横置きフラグ
	D3DXVECTOR3 m_direction; //方向（オプション）
};

class ParticleBase
{
public:

	//存在時間（永遠）
	static const DWORD INIFINITY;

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	ParticleBase();

	//=============================================================================
	// デストラクタ
	//=============================================================================
	virtual ~ParticleBase();

	//=============================================================================
	// 初期化（純粋仮想関数）
	// 引　数：Engine* エンジンクラスのアドレス
	// 　　　　const D3DXVECTOR3 位置
	// 　　　　const DWORD       存在時間
	//=============================================================================
	virtual void Initialize(Engine* pEngine, const D3DXVECTOR3 position, const DWORD existTime) = 0;

	//=============================================================================
	// サイズとテクスチャーの設定
	// 引　数：Engine*     エンジンクラスのアドレス
	// 　　　　const float パーティクルの幅
	// 　　　　const float パーティクルの高さ
	// 　　　　std::string テクスチャーファイル名
	//=============================================================================
	void SetSizeAndTexture(Engine* pEngine, const float width, const float height, std::string strFilename);

	//=============================================================================
	// 更新
	//=============================================================================
	virtual void Update();

	//=============================================================================
	// パーティクルの描画
	// 引　数：Engine*      ３Ｄエンジンクラスのポインタ
	// 　　　　ID3DXEffect* エフェクトのポインタ
	// 　　　　D3DXMATRIX*  ビュープロジェクション変換行列のポインタ
	// 　　　　D3DXMATRIX*  回転行列（ビルボード）のポインタ
	//=============================================================================
	void Draw(LPDIRECT3DDEVICE9 pDevice, ID3DXEffect* pEffect, D3DXMATRIX* pMatVP, D3DXMATRIX* pMatBillboard);

	//=============================================================================
	// パーティクルの追加
	// 引　数：const D3DXVECTOR3   追加する位置
	// 　　　　const D3DCOLORVALUE 色
	// 　　　　const DWORD         存在する時間（ミリ秒）
	// 　　　　const DWORD         フェードアウトする時間（ミリ秒）
	// 　　　　const float         回転角度
	// 　　　　const bool          横置きフラグ（デフォルトはfalse）
	// 　　　　const D3DXVECTOR3　 方向（デフォルトはゼロベクトル）
	//=============================================================================
	void Add(const D3DXVECTOR3 position, const D3DCOLORVALUE color, const DWORD existTime, const DWORD fadeOutTime, const float angle, const bool bHorizontal = false, const D3DXVECTOR3 direction = D3DXVECTOR3(0.0f, 0.0f, 0.0f));

	//=============================================================================
	// 削除する予定の時間を取得
	//=============================================================================
	DWORD GetDeleteTime() const;

	//=============================================================================
	// パーティクルの削除
	//=============================================================================
	void DeleteParticles();

	//=============================================================================
	// 存在チェック
	//=============================================================================
	bool IsExist() const;

	//=============================================================================
	// 永遠に存在し続けるかどうかチェック
	//=============================================================================
	bool IsInfinity() const;

	//=============================================================================
	// 永遠→有限に変更
	// 引　数：const DWORD 削除するまでの時間（ミリ秒）
	//=============================================================================
	void ToFinite(const DWORD deleteTime);

	//=============================================================================
	// 位置を変更
	// 引　数：const D3DXVECTOR3 新しい位置ベクトル
	//=============================================================================
	void ChangePosition(const D3DXVECTOR3 position);

	//=============================================================================
	// 方向を変更
	// 引　数：const D3DXVECTOR3 新しい方向ベクトル
	//=============================================================================
	void ChangeDirection(const D3DXVECTOR3 direction);

protected:

	//パーティクル用頂点配列
	PARTICLE_VERTEX m_vertices[4];

	//テクスチャクラス
	LPDIRECT3DTEXTURE9 m_pTexture;

	//パーティクルリスト
	std::list<Particle> m_lstParticle;

	//位置
	D3DXVECTOR3 m_position;

	//方向
	D3DXVECTOR3 m_direction;

	//生成された時間
	DWORD m_generateTime;

	//存在する時間
	DWORD m_existTime;

	//削除準備フラグ
	bool m_bPrepareDelete;

	//存在フラグ
	bool m_bExist;

	//エンジンへのポインタ
	Engine* m_pEngine;

	//-----------------------------------------------------------------------------
	// 板ポリゴンの設定
	// 引　数：const float パーティクルの幅
	// 　　　　const float パーティクルの高さ
	//-----------------------------------------------------------------------------
	void SetRectangle(const float width, const float height);

	//-----------------------------------------------------------------------------
	// テクスチャの読み込み
	// 引　数：Engine*     ３Ｄエンジンクラスへのポインタ
	// 　　　　std::string ファイル名
	//-----------------------------------------------------------------------------
	void LoadTexture(Engine* pEngine, std::string strFilename);

	//-----------------------------------------------------------------------------
	// テクスチャの削除
	//-----------------------------------------------------------------------------
	void DeleteTexture();

	//-----------------------------------------------------------------------------
	// 存在チェック
	// 備　考：存在時間を経過したパーティクルはリストから削除される
	//-----------------------------------------------------------------------------
	void ExistCheck();

	//コピー防止
	ParticleBase& operator=(const ParticleBase&);
	ParticleBase(const ParticleBase&);
};