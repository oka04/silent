//*****************************************************************************
//
// モデル管理クラス
//
// ModelManage.h
//
// K_Yamaoka
//
// 2015/01/29
//
//*****************************************************************************

#pragma once

#include <windows.h>
#include <d3dx9.h>
#include <dxerr9.h>
#include <string>
#include <map>

#include "ModelBase.h"

//型定義
typedef std::map< std::string, ModelBase* >::iterator MODEL_ITER;

class ModelManage
{
public:

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	ModelManage();

	//=============================================================================
	// デストラクタ
	//=============================================================================
	~ModelManage();

	//=============================================================================
	// モデルデータの追加
	// 引　数：LPDIRECT3DDEVICE9 ３Ｄデバイスへのポインタ
	// 　　　　std::string       Ｘファイル名
	// 　　　　bool              隣接データ作成フラグ（デフォルトはfalse）
	// 備　考：追加するだけでは使用出来ない。GetModelを使って取得する必要がある。
	//=============================================================================
	void AddModel(LPDIRECT3DDEVICE9 pDevice, std::string strFilename, bool bCreateAdjacencyData = false);

	//=============================================================================
	// モデルデータの取得
	// 戻り値：ModelBase* モデルベースクラスのポインタ
	// 引　数：string Ｘファイル名
	//=============================================================================
	ModelBase* GetModel(std::string strFilename);

	//=============================================================================
	// アニメーションコントローラーの取得
	// 戻り値：ID3DXAnimationController* アニメーションコントローラーのポインタ
	// 引　数：string Ｘファイル名
	//=============================================================================
	ID3DXAnimationController* GetAnimationController(std::string strFilename);

	//=============================================================================
	// モデルデータの解放
	// 引　数：string Ｘファイル名
	//=============================================================================
	void ReleaseModel(std::string strFilename);

private:

	//モデルベースクラス管理用マップ
	std::map< std::string, ModelBase* > m_mapModel;

	ModelManage& operator=(const ModelManage&);
	ModelManage(const ModelManage&);
};