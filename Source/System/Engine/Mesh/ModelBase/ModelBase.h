//*****************************************************************************
//
// モデルベースクラス（モデル管理クラスに本体を格納、モデルクラスへコピーして使う）
//
// ModelBase.h
//
// K_Yamaoka
//
// 2015/01/29
//
// 2017/09/28 GetDistance関数を追加
//
// 2020/09/01 シェーダー対応に変更
//
// 2021/11/02 SetCurrentPosition関数をSetCurrentIndex関数へ名称変更
//
//*****************************************************************************

#pragma once

#include <windows.h>
#include <d3dx9.h>
#include <dxerr9.h>
#include <string>

#include "AllocateHierarchy.h"
#include "Frame.h"

#include "..\\..\\..\\Utility\\Vector3D.h"

#include "..\\..\\..\\..\\Effect\\resource.h"

//-----------------------------------------------------------------------------
//隣接データ用構造体
//-----------------------------------------------------------------------------
typedef struct {
	D3DXVECTOR3 vertices[3];  //ポリゴンを構成する３頂点の座標
	D3DXVECTOR3 normal;       //法線
	DWORD       adjacency[3]; //隣接するポリゴンのインデックス
	bool        bChecked;     //チェック用
} AdjacencyData;


class ModelBase
{
public:

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	ModelBase();

	//=============================================================================
	// デストラクタ
	//=============================================================================
	~ModelBase();

	//=============================================================================
	// モデルデータの読み込み
	// 引　数：LPDIRECT3DDEVICE9 ３Ｄデバイスへのポインタ
	// 　　　　std::string       Ｘファイル名
	//=============================================================================
	void LoadModel(LPDIRECT3DDEVICE9 pDevice, std::string strFilename);

	//=============================================================================
	// アニメーションコントローラーのクローン
	// 戻り値：クローンされたアニメーションコントローラーのポインタまたはnullptr
	//=============================================================================
	ID3DXAnimationController* CloneAnimationController();

	//=============================================================================
	// モデルデータの描画
	// 引　数：LPD3DXMATRIX      ワールド座標変換マトリックスへのポインタ
	// 　　　　LPD3DXMATRIX      ビュープロジェクション変換マトリックスへのポインタ
	// 　　　　D3DCOLORVALUE*    アンビエントライトの色へのポインタ
	// 　　　　D3DLIGHT9*        ライトへのポインタ
	//=============================================================================
	void Draw(LPD3DXMATRIX pMatWorld, LPD3DXMATRIX pMatVP, D3DCOLORVALUE* pAmbient, D3DLIGHT9* pLight);

	//=============================================================================
	// ルートフレームの変換マトリックスを取得
	// 引　数：LPD3DXMATRIX 変換マトリックスのポインタ
	//=============================================================================
	void GetMatrixFromRootFrame(LPD3DXMATRIX pMatrix);

	//=============================================================================
	// フレーム名から変換マトリックスを取得
	// 引　数：std::string  フレーム名
	// 　　　　LPD3DXMATRIX 変換マトリックスのポインタ
	//=============================================================================
	void GetMatrixFromFrameName(std::string strFrameName, LPD3DXMATRIX pMatrix);

	//=============================================================================
	// ルートフレームのポインタを取得
	// 戻り値：ルートフレームのポインタ
	//=============================================================================
	LPD3DXMESH ModelBase::GetRootMesh();

	//=============================================================================
	// 隣接データ配列の作成
	//=============================================================================
	void CreateAdjacencyData();

	//=============================================================================
	// 地形上の高さを設定する
	// 戻り値：成功 true、失敗 false
	// 引　数：D3DXVECTOR3* 現在位置座標へのポインタ
	// 備　考：成功した場合、pVecPosの[y座標]が更新される
	// 　　　　動かないオブジェクトにはこちらを使う
	//=============================================================================
	bool SetPosition(D3DXVECTOR3* pVecPos);

	//=============================================================================
	// 現在上に乗っているポリゴンインデックスをセット
	// 戻り値：成功 true、失敗 false
	// 引　数：D3DXVECTOR3* 現在位置座標へのポインタ
	// 　　　　DWORD*       現在のポリゴンインデックスへのポインタ
	// 備　考：成功後、UpdatePositionで高さが変化する
	//=============================================================================
	bool SetCurrentIndex(const D3DXVECTOR3* pVecPos, DWORD* pCurrentIndex);

	//=============================================================================
	// 隣接ポリゴンチェック用フラグのクリア
	// 備　考：UpdatePositionを呼び出す前に必ず呼び出さなければならない
	//=============================================================================
	void ClearCheckFlag();

	//=============================================================================
	// 移動後の位置を設定する
	// 戻り値：成功 true、失敗 false
	// 引　数：D3DXVECTOR3* 現在位置座標へのポインタ
	// 　　　　DWORD        現在のポリゴンインデックス
	// 　　　　DWORD*       現在のポリゴンインデックスへのポインタ
	// 備　考：成功した場合、pVecPosの[y座標]が更新される
	//=============================================================================
	bool UpdatePosition(D3DXVECTOR3* pVecPos, DWORD currentIndex, DWORD* pSourceIndex);

	//=============================================================================
	// バウンディングスフィア半径の取得
	// 戻り値：バウンディングスフィアの半径
	//=============================================================================
	float GetBoundingShpereRadius();

	//=============================================================================
	// バウンディングボックス最大値の取得
	// 戻り値：バウンディングボックス最大値
	//=============================================================================
	D3DXVECTOR3 GetBoundingBoxMax();

	//=============================================================================
	// バウンディングボックス最小値の取得
	// 戻り値：バウンディングボックス最小値
	//=============================================================================
	D3DXVECTOR3 GetBoundingBoxMin();

	//===========================================================================
	// レイとポリゴンの交点までの距離を取得
	// 戻り値：レイとポリゴンの交点距離
	// 引　数：D3DXVECTOR3& 現在位置座標への参照
	//		　 D3DXVECTOR3& キャラクターの向きへの参照
	// 　　　　float        チェックする最大距離
	//===========================================================================
	float GetDistance(const D3DXVECTOR3 &position, const D3DXVECTOR3 &ray, const float limitDistance);

private:

	//階層構造を持ったメッシュ管理クラスのポインタ
	AllocateHierarchy* m_pAllocateHierarchy;

	//フレーム管理クラスのポインタ
	Frame* m_pFrame;

	//アニメーションコントローラーのポインタ
	ID3DXAnimationController* m_pAnimationController;

	//モデルデータロード済みフラグ
	bool m_bLoaded;

	//隣接ﾃﾞｰﾀ用(地形ﾃﾞｰﾀ用)
	AdjacencyData* m_pAdjacencyData;

	//ワールド座標変換マトリックス
	D3DXMATRIX m_matWorld;

	//エフェクト（シェーダー）
	ID3DXEffect* m_pEffect;

	//-----------------------------------------------------------------------------
	// 衝突判定　レイとポリゴンの交点を求める
	// 戻り値：交差している場合 true、していない場合 false
	// 引　数：const D3DXVECTOR3* レイの発射点へのポインタ
	// 　　　　const D3DXVECTOR3* レイの方向へのポインタ（単位ベクトル）
	// 　　　　const D3DXVECTOR3* ポリゴンの法線へのポインタ
	// 　　　　const D3DXVECTOR3  ポリゴンの頂点配列
	// 　　　　D3DXVECTOR3*       交点があった場合、交点の座標を格納する変数へのポインタ
	// 備　考：表ポリゴンのみ判定を行う。
	//-----------------------------------------------------------------------------
	bool CheckCrossPoint(const D3DXVECTOR3* pVecPos, const D3DXVECTOR3* pVecRay, const D3DXVECTOR3* pVecNormal, const D3DXVECTOR3 vPolygon[3], D3DXVECTOR3* pVecCrossPoint);

	ModelBase& operator=(const ModelBase&);
	ModelBase(const ModelBase&);
};