//*****************************************************************************
//
// プリミティブ（基本形状）クラス
//
// Primitive.h
//
// K_Yamaoka
//
// 2013/03/04
//
// 2020/08/25 Draw関数の引数を変更
//
// 2021/10/10 Draw関数にデフォルト引数を追加（ライト無し三角形を描画するため）
//
//*****************************************************************************

#pragma once

#include <d3dx9.h>

#include <string>
#include <vector>

#include "..\\Engine.h"
#include "..\\Matrix\\Camera.h"
#include "..\\Matrix\\Projection.h"
#include "..\\Light\\Ambient.h"
#include "..\\Light\\Directional.h"
#include "..\\Light\\Spot.h"

#include "..\\..\\..\\Effect\\resource.h"

//-----------------------------------------------------------------------------
//テクスチャ座標構造体
//-----------------------------------------------------------------------------
struct Coord {

	float u; //水平方向座標（０～１）
	float v; //垂直方向座標（０～１）

	//=============================================================================
	//コンストラクタ
	//=============================================================================
	Coord() : u(0), v(0) {}

	//=============================================================================
	//コンストラクタ
	//=============================================================================
	Coord(const float u, const float v) : u(u), v(v) {}
};


class Primitive
{
public:

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	Primitive();

	//=============================================================================
	// デストラクタ
	//=============================================================================
	~Primitive();

	//=============================================================================
	// 三角ポリゴン（１つ）の作成
	// 引　数：Engine*           ３Ｄエンジンクラスへのポインタ
	// 　　　　const D3DXVECTOR3 ポリゴンを構成する３頂点の座標（配列）
	//=============================================================================
	void CreateTriangle(Engine* pEngine, const D3DXVECTOR3 vecPosition[3]);

	//=============================================================================
	// 三角ポリゴン（１つ）の作成：法線付き
	// 引　数：Engine*            ３Ｄエンジンクラスへのポインタ
	// 　　　　const D3DXVECTOR3  ポリゴンを構成する３頂点の座標（配列）
	// 　　　　const D3DXVECTOR3* 法線ベクトルへのポインタ（単位ベクトル）
	//=============================================================================
	void CreateTriangle(Engine* pEngine, const D3DXVECTOR3 vecPosition[3], const D3DXVECTOR3* pVecNormal);

	//=============================================================================
	// 三角ポリゴン（１つ）の作成：法線、テクスチャ座標付き
	// 引　数：Engine*            ３Ｄエンジンクラスへのポインタ
	// 　　　　const D3DXVECTOR3  ポリゴンを構成する３頂点の座標（配列）
	// 　　　　const D3DXVECTOR3* 法線ベクトルへのポインタ（単位ベクトル）
	// 　　　　const Coord        テクスチャ座標構造体配列
	//=============================================================================
	void CreateTriangle(Engine* pEngine, const D3DXVECTOR3 vecPosition[3], const D3DXVECTOR3* pVecNormal, const Coord coords[3]);

	//=============================================================================
	// 板ポリゴンの作成：法線、テクスチャ座標付き
	// 引　数：Engine*     ３Ｄエンジンクラスへのポインタ
	// 　　　　const float 幅
	// 　　　　const float 高さ
	//=============================================================================
	void CreateRectangle(Engine* pEngine, const float width, const float height);

	//=============================================================================
	// ボックスの作成：法線、テクスチャ座標付き
	// 引　数：Engine*     ３Ｄエンジンクラスへのポインタ
	// 　　　　const float 幅
	// 　　　　const float 高さ
	// 　　　　const float 奥行
	//=============================================================================
	void CreateBox(Engine* pEngine, const float width, const float height, const float depth);

	//=============================================================================
	// 球（スフィア）の作成：法線、テクスチャ座標付き
	// 引　数：Engine*     ３Ｄエンジンクラスへのポインタ
	// 　　　　const float 半径
	// 　　　　const float セグメント数
	//=============================================================================
	void CreateSphere(Engine* pEngine, const float radius, const unsigned int segment);

	//=============================================================================
	// テクスチャの読み込み
	// 引　数：Engine*     ３Ｄエンジンクラスへのポインタ
	// 　　　　std::string ファイル名
	// 　　　　const DWORD カラーキー
	//=============================================================================
	void LoadTexture(Engine* pEngine, std::string strFilename, const DWORD colorKey = 0x00ff00ff);

	//=============================================================================
	// ワールド座標変換行列の取得
	// 戻り値：ワールド座標変換行列
	//=============================================================================
	D3DXMATRIX GetWorldTransformMatrix() const;

	//=============================================================================
	// ワールド座標変換行列の設定
	// 引　数：const LPD3DXMATRIX ワールド座標変換行列へのポインタ
	//=============================================================================
	void SetWorldTransform(const LPD3DXMATRIX pMatWorld);

	//=============================================================================
	// プリミティブの描画
	// 引　数：Engine*           ３Ｄエンジンクラスのポインタ
	// 　　　　Camera*           カメラクラスのポインタ
	// 　　　　Projection*       プロジェクションクラスのポインタ
	// 　　　　AmbientLight*     アンビエントライトクラスのポインタ
	// 　　　　DirectionalLight* ディレクショナルライトのポインタ
	//=============================================================================
	void Draw(Engine* pEngine, Camera* pCamera, Projection* pProj, AmbientLight* pAmbient = nullptr, DirectionalLight* pLight = nullptr, std::vector<SpotLight>* pSpotLights = nullptr);

	//=============================================================================
	//　バウンディングスフィア半径の取得
	//　戻り値：バウンディングスフィアの半径
	//=============================================================================
	float GetBoundingShpereRadius();

	//=============================================================================
	//　バウンディングボックス最大値の取得
	//　戻り値：バウンディングボックス最大値
	//=============================================================================
	D3DXVECTOR3 GetBoundingBoxMax();

	//=============================================================================
	//　バウンディングボックス最小値の取得
	//　戻り値：バウンディングボックス最小値
	//=============================================================================
	D3DXVECTOR3 GetBoundingBoxMin();

	//=============================================================================
	// マテリアルの設定
	// 引　数：const D3DMATERIAL9 マテリアル
	//=============================================================================
	void SetMaterial(const D3DMATERIAL9 material);

	void DrawForDepthPass(Engine* pEngine);
private:

	static const int MAX_SPOT_LIGHTS;

	//プリミティブタイプ列挙体
	enum PRIMITIVE_TYPE {
		NONE,
		TRIANGLE_XYZ,
		TRIANGLE_XYZ_NORMAL,
		TRIANGLE_XYZ_NORMAL_UV,
		RECTANGLE,
		BOX,
		SPHERE,
	};

	//プリミティブの型
	PRIMITIVE_TYPE m_type;

	//メッシュクラスへのポインタ
	LPD3DXMESH m_pMesh;

	//マテリアル構造体
	D3DMATERIAL9 m_material;

	//テクスチャクラス
	LPDIRECT3DTEXTURE9 m_pTexture;

	//ワールド座標変換行列
	D3DXMATRIX m_matWorld;

	//エフェクト（シェーダー）
	ID3DXEffect* m_pEffect;

	//頂点宣言
	LPDIRECT3DVERTEXDECLARATION9 m_pVertexDeclaration;

	//-----------------------------------------------------------------------------
	// メッシュの削除
	//-----------------------------------------------------------------------------
	void DeleteMesh();

	//-----------------------------------------------------------------------------
	// テクスチャの削除
	//-----------------------------------------------------------------------------
	void DeleteTexture();

	//コピー防止
	Primitive& operator=(const Primitive&);
	Primitive(const Primitive&);
};