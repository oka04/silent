//*****************************************************************************
//
// モデルクラス（ユーザがモデルデータを扱う際に使用する）
//
// Model.h
//
// K_Yamaoka
//
// 2015/01/29
//
// 2017/09/28 GetDistance関数を追加
//
// 2019/08/20 トラックが１つしかないアニメーションに対応するため以下の関数を追加
//            SetAdvanceTimeOneTrackAnimation ChangeAnimationOneTrackAnimation
//            LoopAnimationOneTrackAnimation WaitFinishAnimationOneTrackAnimation
//            GetNowFrameOneTrackAnimation
//
// 2020/09/01 シェーダー対応に変更
//
// 2021/10/10 GetCurrentPosition関数をSetCurrentPosition関数へ名称変更
//
// 2021/11/02 SetCurrentPosition関数をSetCurrentIndex関数へ名称変更
//
//*****************************************************************************

#pragma once

#include "..\\Matrix\\Camera.h"
#include "..\\Matrix\\Projection.h"
#include "..\\Light\\Ambient.h"
#include "..\\Light\\Directional.h"

#include "ModelBase\\ModelBase.h"

//-----------------------------------------------------------------------------
//アニメーションセット用構造体
//-----------------------------------------------------------------------------
typedef struct{
	LPD3DXANIMATIONSET m_pAnimationSet; //アニメーションセット構造体へのポインタ
	FLOAT m_trackSpeed;                 //トラックスピード調節値(何秒で１ループさせるか)
	FLOAT m_shiftTime;                  //アニメーション切り替え時の時間
	FLOAT m_weightTime;                 //ウェイト時間計算用
} AnimationSets;

class Model
{
public:

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	Model();

	//=============================================================================
	// デストラクタ
	//=============================================================================
	~Model();

	//=============================================================================
	// モデルベースクラスの取得
	// 引　数：ModelBase* モデルベースクラスへのポインタ
	//=============================================================================
	void SetModel(ModelBase* pModelBase);

	//=============================================================================
	// アニメーションコントローラーの取得
	// 引　数：ID3DXAnimationController* アニメーションコントローラーへのポインタ
	//=============================================================================
	bool SetAnimationController(ID3DXAnimationController* pAnimationController);

	//=============================================================================
	// メッシュの描画
	// 戻り値：成功 true、失敗 false
	// 引　数：Camera*           カメラクラスのポインタ
	// 　　　　Projection*       プロジェクションクラスのポインタ
	// 　　　　AmbientLight*     アンビエントライトクラスのポインタ
	// 　　　　DirectionalLight* ディレクショナルライトのポインタ
	// 　　　　bool    アニメーションフラグ
	//=============================================================================
	void Draw(Camera* pCamera, Projection* pProj, AmbientLight* pAmbient, DirectionalLight* pLight, bool bAnimation = true);

	//=============================================================================
	// ワールド座標変換行列の設定
	// 引　数：const LPD3DXMATRIX ﾜｰﾙﾄﾞ座標変換行列へのポインタ
	//=============================================================================
	void SetWorldTransform(const LPD3DXMATRIX pMatWorld);

	//=============================================================================
	// ワールド座標変換行列の取得
	// 戻り値：ワールド座標変換行列
	//=============================================================================
	D3DXMATRIX GetWorldTransform() const;

	//=============================================================================
	// ルートフレームの変換マトリックスを取得
	// 引　数：LPD3DXMATRIX 変換マトリックスのポインタ
	//=============================================================================
	void GetMatrixFromRootFrame(LPD3DXMATRIX pMatrix);

	//=============================================================================
	// フレーム名から変換マトリックスを取得
	// 引　数：std::string  フレーム名
	// 　　　　LPD3DXMATRIX 変換マトリックスのポインタ
	//=============================================================================
	void GetMatrixFromFrameName(std::string strFrameName, LPD3DXMATRIX pMatrix);

	//=============================================================================
	// ルートフレームのポインタを取得
	// 戻り値：ルートフレームのポインタ
	//=============================================================================
	LPD3DXMESH GetRootMesh();

	//=============================================================================
	// アニメーションセットの数を取得
	// 戻り値：アニメーションセットの数
	//=============================================================================
	UINT GetAnimationSetsCount() const;

	//=============================================================================
	// アニメーションセットを変更する
	// 引　数：const int アニメーションセットのインデックス
	//=============================================================================
	void ChangeAnimationSet(const int index);

	//=============================================================================
	// 現在のアニメーションセットを取得する
	// 戻り値：アニメーションセットのインデックス
	//=============================================================================
	int GetNowAnimationSet() const;

	//=============================================================================
	// アニメーションを進める時間を設定する
	// 引　数：DOUBLE アニメーションを進める時間(秒単位)をセット
	//=============================================================================
	void SetAdvanceTime(DOUBLE timeDelta);

	//=============================================================================
	// アニメーションに設定されているグローバル時間を取得
	// 戻り値：アニメーションに設定されているグローバル時間
	//=============================================================================
	double GetTime() const;

	//=============================================================================
	// トラックスピードを設定する
	// 引　数：const int    アニメーションセットのインデックス
	// 　　　：const DOUBLE １ループにかかる時間
	//=============================================================================
	void SetTrackSpeed(const int index, const DOUBLE time);

	//=============================================================================
	// アニメーションブレンドの移行時間を設定する
	// 引　数：const int    アニメーションセットのインデックス
	// 　　　　const DOUBLE アニメーションブレンドの移行時間（初期値0.1秒）
	//=============================================================================
	void SetShiftTime(const int index, const DOUBLE time);

	//=============================================================================
	// 地形上の高さを設定する
	// 戻り値：成功 true、失敗 false
	// 引　数：D3DXVECTOR3* 現在位置座標へのポインタ
	// 備　考：成功した場合、pVecPosの[y座標]が更新される
	// 　　　　動かないオブジェクトにはこちらを使う
	//=============================================================================
	bool SetPosition(D3DXVECTOR3* pVecPos);

	//=============================================================================
	// 現在上に乗っているポリゴンインデックスをセット
	// 戻り値：成功 true、失敗 false
	// 引　数：D3DXVECTOR3* 現在位置座標へのポインタ
	// 　　　　DWORD*       現在のポリゴンインデックスへのポインタ
	// 備　考：成功後、UpdatePositionで高さが変化する
	//=============================================================================
	bool SetCurrentIndex(const D3DXVECTOR3* pVecPos, DWORD* pCurrentIndex);

	//=============================================================================
	// 隣接ポリゴンチェック用フラグのクリア
	// 備　考：UpdatePositionを呼び出す前に必ず呼び出さなければならない
	//=============================================================================
	void ClearCheckFlag();

	//=============================================================================
	// 移動後の位置を設定する
	// 戻り値：成功 true、失敗 false
	// 引　数：D3DXVECTOR3* 現在位置座標へのポインタ
	// 　　　　DWORD*       現在のポリゴンインデックスへのポインタ
	// 備　考：成功した場合、pVecPosの[y座標]が更新される
	//=============================================================================
	bool Model::UpdatePosition(D3DXVECTOR3* pVecPos, DWORD* pCurrentIndex);

	//=============================================================================
	// バウンディングスフィア半径の取得
	// 戻り値：バウンディングスフィアの半径
	//=============================================================================
	float GetBoundingShpereRadius();

	//=============================================================================
	// バウンディングボックス最大値の取得
	// 戻り値：バウンディングボックス最大値
	//=============================================================================
	D3DXVECTOR3 GetBoundingBoxMax();

	//=============================================================================
	// バウンディングボックス最小値の取得
	// 戻り値：バウンディングボックス最小値
	//=============================================================================
	D3DXVECTOR3 GetBoundingBoxMin();

	//===========================================================================
	// レイとポリゴンの交点までの距離を取得
	// 戻り値：レイとポリゴンの交点距離
	// 引　数：D3DXVECTOR3& 現在位置座標への参照
	//		　 D3DXVECTOR3& キャラクターの向きへの参照
	// 　　　　float        チェックする最大距離
	//===========================================================================
	float GetDistance(const D3DXVECTOR3 &position, const D3DXVECTOR3 &ray, const float limitDistance);

	//トラックが１つしかないアニメーションへの対応

	//===========================================================================
	// アニメーションを進める時間を設定する（トラックが１つしかないアニメーション対応）
	// 引　数：maxFrame 最大フレーム数
	//===========================================================================
	void SetAdvanceTimeOneTrackAnimation(const int maxFrame);

	//===========================================================================
	// アニメーションを変更する（トラックが１つしかないアニメーション対応）
	// 引　数：start 開始フレーム
	// 　　　　end   終了フレーム
	//===========================================================================
	void ChangeAnimationOneTrackAnimation(const int start, const int end);

	//===========================================================================
	// アニメーションをループ再生する（トラックが１つしかないアニメーション対応）
	//===========================================================================
	void LoopAnimationOneTrackAnimation();

	//===========================================================================
	// アニメーションを完了まで再生する（トラックが１つしかないアニメーション対応）
	// 戻り値：終了 true
	//===========================================================================
	bool WaitFinishAnimationOneTrackAnimation();

	//===========================================================================
	// 現在のフレーム番号を取得（トラックが１つしかないアニメーション対応）
	// 戻り値：フレーム番号
	//===========================================================================
	int GetNowFrameOneTrackAnimation();

private:

	//ワールド座標変換行列
	D3DXMATRIX m_matWorld;

	//モデルベースクラスへのポインタ
	ModelBase* m_pModelBase;

	//アニメーションコントローラーへのポインタ
	ID3DXAnimationController* m_pAnimationController;

	//現在のアニメーションセット番号
	int m_nowAnimationSet;

	//アニメーションセットの数
	int m_numAnimationSets;

	//アニメーションセット構造体配列
	AnimationSets* m_pAnimationSets;

	//アニメーションを進める時間
	DOUBLE m_advanceTime;

	//トラックが１つしかないアニメーションへの対応

	//トラックが１つしかないアニメーションかどうか
	bool m_bOneTrackAnimation;

	//トラックの位置
	double m_trackPosition;

	//アニメーションのループが終わったか
	bool m_bEndLoop;

	//アニメーションの開始フレーム、終了フレーム
	double m_startFrame;
	double m_endFrame;

	//-----------------------------------------------------------------------------
	// アニメーションを進める
	//-----------------------------------------------------------------------------
	void AdvanceTime();

	Model& operator=(const Model&);
	Model(const Model&);
};