//*****************************************************************************
//
// 2D用テクスチャ管理
//
// Texture.h
//
// K_Yamaoka
//
// 2011/11/10
//
// 2014/11/28 エラーメッセージを追加
//
// 2016/12/21 フリーサイズテクスチャに対応
//
//*****************************************************************************

#pragma once

#include "Texture.h"

#include <d3dx9.h>
#include <dxerr9.h>
#include <map>
#include <string>

#include "..\\Exception\\DxSystemException.h"

//イテレータの型定義
typedef std::map< std::string, Texture* >::iterator TEXTURE_ITER;

class TextureManage
{
public:

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	TextureManage();

	//=============================================================================
	// デストラクタ
	//=============================================================================
	~TextureManage();

	//=============================================================================
	// テクスチャ管理の初期化
	// 引　数：LPDIRECT3D9 Direct3D本体のポインタ
	//=============================================================================
	void Initialize(LPDIRECT3D9 pD3D9);

	//=============================================================================
	// テクスチャーの登録
	// 引　数：string        ファイル名
	// 　　　　TextureClass* テクスチャークラスのアドレス
	//=============================================================================
	void AddTexture(std::string strFileName, Texture* pClsTexture);

	//=============================================================================
	// テクスチャーの解放（省メモリ対策）
	// 戻り値：成功 true、失敗 false
	// 引　数：string ファイル名
	//=============================================================================
	void ReleaseTexture(std::string strFileName);

	//=============================================================================
	// テクスチャーの一時解放（デバイスリセット用）
	//=============================================================================
	void ReleaseAllTexture();

	//=============================================================================
	// テクスチャーの再読み込み（デバイスリセット用）
	// 引　数：LPDIRECT3DDEVICE9 デバイスのポインタ
	//=============================================================================
	void ReloadAllTexture(LPDIRECT3DDEVICE9 pDevice);

	//=============================================================================
	// テクスチャーの探索
	// 戻り値：DIRECT3DTEXTURE9のアドレス
	// 引　数：string ファイル名
	//=============================================================================
	LPDIRECT3DTEXTURE9 SearchTexture(std::string strFileName);

	//=============================================================================
	// テクスチャーのサイズチェック
	// 引　数：D3DXIMAGE_INFO テクスチャ情報
	// 　　　：bool フリーサイズテクスチャサポートフラグ
	//=============================================================================
	void CheckTextureSize(const D3DXIMAGE_INFO& imageInfo, const bool bFreeSizeTexture) const;

private:

	//テクスチャー管理用コンテナ
	std::map< std::string, Texture* > m_mapTexture;

	//このデバイスで使用できるテクスチャの最大サイズ
	UINT m_nMaxTextureWidth;
	UINT m_nMaxTextureHeight;

	//コピー防止
	TextureManage& operator=(const TextureManage&);
	TextureManage(const TextureManage&);
};