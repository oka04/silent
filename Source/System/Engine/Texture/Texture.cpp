//*****************************************************************************
//
// 2D用テクスチャデータ
//
// Texture.cpp
//
// K_Yamaoka
//
// 2011/11/10
//
//*****************************************************************************

#define _USING_V110_SDK71_ 1

#include "Texture.h"

//=============================================================================
// コンストラクタ
//=============================================================================
Texture::Texture() 
	: m_pTexture(nullptr)
	, m_colorKey(COLORKEY_NONE)
{

}

//=============================================================================
// デストラクタ
//=============================================================================
Texture::~Texture()
{
	//テクスチャーの解放

	if (m_pTexture) {
		m_pTexture->Release();
		m_pTexture = nullptr;
	}
}

//=============================================================================
// テクスチャーのアドレスを登録
// 引　数：LPDIRECT3DTEXTURE9 テクスチャーのアドレス
//=============================================================================
void Texture::SetTexturePointer(const LPDIRECT3DTEXTURE9 pTexture)
{
	m_pTexture = pTexture;
}

//=============================================================================
// テクスチャーのアドレスを取得
// 戻り値：LPDIRECT3DTEXTURE9 テクスチャーのアドレス
//=============================================================================
LPDIRECT3DTEXTURE9 Texture::GetTexturePointer() const
{
	return m_pTexture;
}

//=============================================================================
// カラーキーを登録
// 引　数：D3DCOLOR カラーキー
//=============================================================================
void Texture::SetColorKey(const D3DCOLOR colorKey)
{
	this->m_colorKey = colorKey;
}

//=============================================================================
// カラーキーを取得
// 戻り値：D3DCOLOR カラーキー
//=============================================================================
D3DCOLOR Texture::GetColorKey() const
{
	return m_colorKey;
}
